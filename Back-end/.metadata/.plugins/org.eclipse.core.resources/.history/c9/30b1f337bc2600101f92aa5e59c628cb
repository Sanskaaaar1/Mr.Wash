package com.main.AOPLogger;

import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.*;
import org.springframework.stereotype.Component;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Aspect
@Component
public class AopLogger {
    
    private static final Logger logger = LoggerFactory.getLogger(AopLogger.class);

    // Define a reusable pointcut
    @Pointcut("execution(* com.main.RestController.AuthController.login(..))")
    public void loginPointcut() {}
    
    @Pointcut("execution(* com.main.RestController.AuthController.register(..))")
    public void RegisterPointcut() {}
    

    @AfterReturning(pointcut = "loginPointcut()", returning = "result")
    public void afterSuccessfulLogin(Object result) {
        logger.info("Login successful. Result: {}", result);
    }


    @AfterThrowing(pointcut = "loginPointcut()", throwing = "ex")
    public void afterLoginException(Exception ex) {
        logger.error("Unauthorized login attempt. Error: {}", ex.getMessage());
        if (logger.isDebugEnabled()) {
            logger.debug("Stack trace: ", ex);
        }
    }
    
    @AfterReturning(pointcut="RegisterPointcut()",returning="result")
    public void afterSuccessfullyRegister(Object result) {
    	Logger.info("Login succcessful. Result: {}",result);
    }
    
   
    

}