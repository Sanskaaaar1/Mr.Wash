package com.main.Testing;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.http.ResponseEntity;

import com.main.Entity.Booking_Entity;
import com.main.RestController.MyRestController;
import com.main.Service.BookingService;
import com.main.Validator.BookingValidation;

public class MyRestControllerTest {

    @Mock
    private BookingService bookingService;

    @InjectMocks
    private MyRestController myRestController;

    private BookingValidation bookingValidation;

    @BeforeEach
    public void setUp() {
        // Initialize the test data
        bookingValidation = new BookingValidation();
        bookingValidation.setVehicleType("Car");
        bookingValidation.setVehicleCompany("Toyota");
        bookingValidation.setVehicleName("Camry");
        bookingValidation.setVehicleNumber("MH 12 AB 1234");
        // More setup if needed...
    }

    @Test
    public void testSlotBooking() {
        // Mock the behavior of bookingService
        Booking_Entity booking = new Booking_Entity();
        booking.setStatus("REQUESTED");
        when(bookingService.bookSlot(any(BookingValidation.class))).thenReturn(booking);

        // Call the controller method
        ResponseEntity<?> response = myRestController.SlotBooking(bookingValidation, null);

        // Assert the response
        assertEquals(200, response.getStatusCodeValue()); // HTTP OK
        assertEquals("Booking created successfully", response.getBody());
        
        // Verify the service method was called
        verify(bookingService, times(1)).bookSlot(any(BookingValidation.class));
    }
}