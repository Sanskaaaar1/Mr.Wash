package com.main;

import com.main.Entity.Booking_Entity;
import com.main.Entity.Info_Entity;
import com.main.Service.BookingService;
import com.main.Service.InfoServices;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

@ExtendWith(MockitoExtension.class)
class EmployeeServiceApplicationTests {

    @Mock
    private BookingService bookingService;

    @Mock
    private InfoServices infoServices;

    private Booking_Entity testBooking;
    private Info_Entity testInfo;

    @BeforeEach
    void setUp() {
        testBooking = new Booking_Entity();
        testBooking.setBookingId(1);
        testBooking.setStatus("Pending");
        testBooking.setSlotDate(LocalDate.now());

        testInfo = new Info_Entity();
        testInfo.setFirstName("John");
        testInfo.setLastname("Doe");
    }

    // Test for BookingService - getBookingsByStatus
    @Test
    void getBookingsByStatus_ReturnsBookingList() {
        when(bookingService.getBookingsByStatus("Pending")).thenReturn(Arrays.asList(testBooking));

        List<Booking_Entity> result = bookingService.getBookingsByStatus("Pending");

        assertNotNull(result);
        assertEquals(1, result.size());
        assertEquals("Pending", result.get(0).getStatus());
    }

    // Test for BookingService - updateByBookingid
    @Test
    void updateByBookingid_UpdatesStatus() {
        when(bookingService.updateByBookingid(1, "Completed")).thenReturn(Optional.of(testBooking));
        testBooking.setStatus("Completed");

        Optional<Booking_Entity> result = bookingService.updateByBookingid(1, "Completed");

        assertTrue(result.isPresent());
        assertEquals("Completed", result.get().getStatus());
    }

    // Test for BookingService - getBookingByDate
    @Test
    void getBookingByDate_ReturnsBookingList() {
        when(bookingService.getBookingByDate(LocalDate.now())).thenReturn(Arrays.asList(testBooking));

        List<Booking_Entity> result = bookingService.getBookingByDate(LocalDate.now());

        assertNotNull(result);
        assertEquals(1, result.size());
        assertEquals(LocalDate.now(), result.get(0).getSlotDate());
    }

    // Test for BookingService - getBookingById
    @Test
    void getBookingById_ReturnsBooking() {
        when(bookingService.getBookingById(1)).thenReturn(Optional.of(testBooking));

        Optional<Booking_Entity> result = bookingService.getBookingById(1);

        assertTrue(result.isPresent());
        assertEquals(1, result.get().getBookingId());
    }

    // Test for BookingService - AddEmp
    @Test
    void AddEmp_ReturnsUpdatedBooking() {
        testBooking.setEmpName("John Doe");
        when(bookingService.AddEmp(1, "John Doe")).thenReturn(testBooking);

        Booking_Entity result = bookingService.AddEmp(1, "John Doe");

        assertEquals("John Doe", result.getEmpName());
        assertEquals(1, result.getBookingId());
    }

    // Test for BookingService - getBookingsHandledByEmployee
    @Test
    void getBookingsHandledByEmployee_ReturnsBookingList() {
        when(bookingService.getBookingsHandledByEmployee("John Doe")).thenReturn(Arrays.asList(testBooking));

        List<Booking_Entity> result = bookingService.getBookingsHandledByEmployee("John Doe");

        assertNotNull(result);
        assertEquals(1, result.size());
        assertEquals("John Doe", result.get(0).getEmpName());
    }

    // Test for InfoServices - getByName
    @Test
    void getByName_ReturnsInfoEntity() {
        when(infoServices.getByName("John Doe")).thenReturn(testInfo);

        Info_Entity result = infoServices.getByName("John Doe");

        assertNotNull(result);
        assertEquals("John", result.getFirstName());
        assertEquals("Doe", result.getLastname());
    }
}
