package com.main.RestController;

import java.security.Principal;
import java.time.LocalDate;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.main.Entity.Booking_Entity;
import com.main.Entity.Info_Entity;
import com.main.Exception.UserNotFoundException;
import com.main.Repository.InfoRepo;
import com.main.Service.BookingService;
import com.main.Service.InfoServices;

@RestController
@RequestMapping("/empAPI")
@CrossOrigin(origins = "http://localhost:3000")
public class MyRestController {
	@Autowired
	BookingService bookingService;
	
	@Autowired
	InfoServices infoService;
	
	@Autowired
	InfoRepo infoRepository;
	
	
	@GetMapping("/status/{stus}")
	public List<Booking_Entity> searchByStatus(@PathVariable String stus  ) {
		  return bookingService.getBookingsByStatus(stus);
	}
	
	@PutMapping("/update/{id}/{status}")
	public Optional<Booking_Entity> updateById(@PathVariable Integer id, @PathVariable String status) {
		Optional<Booking_Entity> booking=bookingService.updateByBookingid(id,status);
		return booking;
	}
	
	@GetMapping("/todaysTask")
	public List<Booking_Entity> todaysTask(){
		LocalDate date=LocalDate.now();//plusDays(2);
		List<Booking_Entity> booking=bookingService.getBookingByDate(date);
		return booking;
	}
	@GetMapping("/searchByID/{id}")
	public Optional<Booking_Entity> searchByID(@PathVariable Integer id) {
		return bookingService.getBookingById(id);
	}
	@GetMapping("/searchByName/{name}")
	public List<Booking_Entity> searchByName(@PathVariable String name) {
	    Info_Entity info = infoService.getByName(name);
	    List<Booking_Entity> BookingList = info.getBookings();
	    return BookingList;
	}
	@GetMapping("/MyDetails")
	public Info_Entity MyDetails(Principal principal) {
	String username=principal.getName();
	Info_Entity user =infoRepository.findByAuthenticationUsername(username);
	if(user==null) {
		throw new UserNotFoundException("User Not Found");
	}
	user.getAuthentication().setUser(null);
	return user;
	}
	
	@GetMapping("/addEmpname/{bookingid}")
	public Booking_Entity addEmpName(@PathVariable Integer bookingid) {
	    Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
	    String username = authentication.getName();   // âœ… SAFE: Always works if JWT is valid
	    
	    System.out.println("Logged in username: " + username);
	    return bookingService.AddEmp(bookingid, username);
	}
	
	@GetMapping("/history")
	public List<Booking_Entity> MyHistory() {
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
	    String username = authentication.getName(); 
		List<Booking_Entity> lists=bookingService.getByUserHistory(username);
		for(Booking_Entity b:lists) {
			b.setUser(null);
		}
		return lists;
	} 

	
	
}
