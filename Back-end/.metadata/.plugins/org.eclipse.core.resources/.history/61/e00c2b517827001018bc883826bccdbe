//package com.main.Testing;
//
//import static org.junit.jupiter.api.Assertions.*;
//
//import java.security.Principal;
//import java.time.LocalDate;
//import java.time.LocalTime;
//
//import com.main.Entity.Info_Entity;
//import com.main.Exception.*;
//import com.main.RestController.MyRestController;
//import com.main.Validator.BookingValidation;
//import org.junit.jupiter.api.BeforeEach;
//import org.junit.jupiter.api.Test;
//
//public class MyRestControllerTest {
//
//    private MyRestController controller;
//    private Principal principal;
//    private BookingValidation validBooking;
//
//    @BeforeEach
//    void setUp() {
//        controller = new MyRestController();
//        principal = () -> "Tamanna@123"; // Simple Principal implementation
//        
//        // Setup valid booking data
//        validBooking = new BookingValidation();
//        validBooking.setVehicleType("Car");
//        validBooking.setVehicleCompany("Toyota");
//        validBooking.setVehicleName("Camry");
//        validBooking.setVehicleNumber("MH 12 AB 1234");
//        validBooking.setDate(LocalDate.now().plusDays(1));
//        validBooking.setTime(LocalTime.of(11, 0));
//        validBooking.setServices("Oil Change");
//    }
//
//    @Test
//    void testSlotBooking_ValidInput() {
//        // This will throw NPE because we're not mocking repositories
//        // But we can test the validation logic
//        assertDoesNotThrow(() -> {
//            controller.SlotBooking(validBooking, principal);
//        });
//    }
//
//    @Test
//    void testSlotBooking_InvalidVehicleType() {
//        BookingValidation invalid = new BookingValidation();
//        invalid.setVehicleType(null); // Invalid
//        
//        Exception exception = assertThrows(VehicleTypeException.class, () -> {
//            controller.SlotBooking(invalid, principal);
//        });
//        
//        assertEquals("Vehicle type is required", exception.getMessage());
//    }
//
//    @Test
//    void testSlotBooking_InvalidVehicleNumber() {
//        BookingValidation invalid = new BookingValidation();
//        invalid.setVehicleType("Car");
//        invalid.setVehicleCompany("Toyota");
//        invalid.setVehicleName("Camry");
//        invalid.setVehicleNumber("INVALID"); // Invalid format
//        invalid.setDate(LocalDate.now().plusDays(1));
//        invalid.setTime(LocalTime.of(11, 0));
//        invalid.setServices("Oil Change");
//        
//        Exception exception = assertThrows(NumberInvalidException.class, () -> {
//            controller.SlotBooking(invalid, principal);
//        });
//        
//        assertEquals("Invalid format. Example: MH 12 AB 1234", exception.getMessage());
//    }
//
//    @Test
//    void testSlotBooking_TimeBefore10AM() {
//        BookingValidation invalid = new BookingValidation();
//        invalid.setVehicleType("Car");
//        invalid.setVehicleCompany("Toyota");
//        invalid.setVehicleName("Camry");
//        invalid.setVehicleNumber("MH 12 AB 1234");
//        invalid.setDate(LocalDate.now().plusDays(1));
//        invalid.setTime(LocalTime.of(9, 0)); // Before 10 AM
//        invalid.setServices("Oil Change");
//        
//        Exception exception = assertThrows(TimeBeforeException.class, () -> {
//            controller.SlotBooking(invalid, principal);
//        });
//        
//        assertEquals("Time must be after 10 AM", exception.getMessage());
//    }
//
//    @Test
//    void testSlotBooking_DateInPast() {
//        BookingValidation invalid = new BookingValidation();
//        invalid.setVehicleType("Car");
//        invalid.setVehicleCompany("Toyota");
//        invalid.setVehicleName("Camry");
//        invalid.setVehicleNumber("MH 12 AB 1234");
//        invalid.setDate(LocalDate.now().minusDays(1)); // Past date
//        invalid.setTime(LocalTime.of(11, 0));
//        invalid.setServices("Oil Change");
//        
//        Exception exception = assertThrows(DateFutureException.class, () -> {
//            controller.SlotBooking(invalid, principal);
//        });
//        
//        assertEquals("Date must be in the future", exception.getMessage());
//    }
//
//    // Add more validation tests for other scenarios...
//}
package com.main.Testing;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.security.Principal;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import com.main.Entity.Authentication_Entity;
import com.main.Entity.Booking_Entity;
import com.main.Entity.Info_Entity;
import com.main.Exception.*;
import com.main.Repository.BookingRepository;
import com.main.Repository.InfoRepository;
import com.main.Service.BookingService;
import com.main.Validator.BookingValidation;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.ResponseEntity;

@ExtendWith(MockitoExtension.class)
public class MyRestControllerTest {

    @Mock
    private BookingRepository bookingRepository;

    @Mock
    private InfoRepository infoRepository;

    @Mock
    private BookingService bookingService;

    @Mock
    private AuthenticationService authService;

    @Mock
    private Principal principal;

    @InjectMocks
    private MyRestController myRestController;

    private Info_Entity testUser;
    private Booking_Entity testBooking;
    private BookingValidation validBookingValidation;
    private List<Booking_Entity> bookingList;

    @BeforeEach
    void setUp() {
        // Setup test user
        testUser = new Info_Entity();
        testUser.setId(1L);
        Authentication_Entity auth = new Authentication_Entity();
        auth.setUsername("testuser");
        testUser.setAuthentication(auth);

        // Setup test booking
        testBooking = new Booking_Entity();
        testBooking.setId(1L);
        testBooking.setUser(testUser);
        testBooking.setVehicleType("Car");
        testBooking.setVehicleCompany("Toyota");
        testBooking.setVehicleName("Camry");
        testBooking.setVehicleNumber("MH 12 AB 1234");
        testBooking.setSlotDate(LocalDate.now().plusDays(1));
        testBooking.setSlotTime(LocalTime.of(11, 0));
        testBooking.setServiceType("Oil Change");
        testBooking.setBookingDate(LocalDate.now());
        testBooking.setBookingTime(LocalTime.now());
        testBooking.setStatus("REQUESTED");

        // Setup valid booking validation
        validBookingValidation = new BookingValidation();
        validBookingValidation.setVehicleType("Car");
        validBookingValidation.setVehicleCompany("Toyota");
        validBookingValidation.setVehicleName("Camry");
        validBookingValidation.setVehicleNumber("MH 12 AB 1234");
        validBookingValidation.setDate(LocalDate.now().plusDays(1));
        validBookingValidation.setTime(LocalTime.of(11, 0));
        validBookingValidation.setServices("Oil Change");

        // Setup booking list
        bookingList = new ArrayList<>();
        bookingList.add(testBooking);
    }

    // Test for MyHistory endpoint
    @Test
    void testMyHistory_Success() {
        when(principal.getName()).thenReturn("testuser");
        when(bookingService.getByUserHistory("testuser")).thenReturn(bookingList);

        List<Booking_Entity> result = myRestController.MyHistory(principal);

        assertEquals(1, result.size());
        assertEquals(testBooking.getVehicleType(), result.get(0).getVehicleType());
        assertNull(result.get(0).getUser());
        verify(bookingService).getByUserHistory("testuser");
    }

    // Test for SlotBooking endpoint - success case
    @Test
    void testSlotBooking_Success() {
        when(principal.getName()).thenReturn("testuser");
        when(infoRepository.findByAuthenticationUsername("testuser")).thenReturn(testUser);
        when(bookingRepository.save(any(Booking_Entity.class))).thenReturn(testBooking);

        ResponseEntity<?> response = myRestController.SlotBooking(validBookingValidation, principal);

        assertEquals(200, response.getStatusCodeValue());
        assertEquals("Booking created successfully", response.getBody());
        verify(bookingRepository).save(any(Booking_Entity.class));
    }

    // Test for SlotBooking endpoint - validation failures
    @Test
    void testSlotBooking_VehicleTypeMissing() {
        validBookingValidation.setVehicleType(null);
        
        Exception exception = assertThrows(VehicleTypeException.class, () -> {
            myRestController.SlotBooking(validBookingValidation, principal);
        });
        
        assertEquals("Vehicle type is required", exception.getMessage());
    }

    @Test
    void testSlotBooking_VehicleCompanyMissing() {
        validBookingValidation.setVehicleCompany(null);
        
        Exception exception = assertThrows(VehicleCompanyException.class, () -> {
            myRestController.SlotBooking(validBookingValidation, principal);
        });
        
        assertEquals("Vehicle Company is required", exception.getMessage());
    }

    @Test
    void testSlotBooking_InvalidVehicleNumber() {
        validBookingValidation.setVehicleNumber("INVALID");
        
        Exception exception = assertThrows(NumberInvalidException.class, () -> {
            myRestController.SlotBooking(validBookingValidation, principal);
        });
        
        assertEquals("Invalid format. Example: MH 12 AB 1234", exception.getMessage());
    }

    @Test
    void testSlotBooking_TimeBefore10AM() {
        validBookingValidation.setTime(LocalTime.of(9, 0));
        
        Exception exception = assertThrows(TimeBeforeException.class, () -> {
            myRestController.SlotBooking(validBookingValidation, principal);
        });
        
        assertEquals("Time must be after 10 AM", exception.getMessage());
    }

    @Test
    void testSlotBooking_TimeAfter6PM() {
        validBookingValidation.setTime(LocalTime.of(19, 0));
        
        Exception exception = assertThrows(TimeAfterException.class, () -> {
            myRestController.SlotBooking(validBookingValidation, principal);
        });
        
        assertEquals("Time must be before 6 PM", exception.getMessage());
    }

    @Test
    void testSlotBooking_DateInPast() {
        validBookingValidation.setDate(LocalDate.now().minusDays(1));
        
        Exception exception = assertThrows(DateFutureException.class, () -> {
            myRestController.SlotBooking(validBookingValidation, principal);
        });
        
        assertEquals("Date must be in the future", exception.getMessage());
    }

    // Test for MyDetails endpoint - success case
    @Test
    void testMyDetails_Success() {
        when(principal.getName()).thenReturn("testuser");
        when(infoRepository.findByAuthenticationUsername("testuser")).thenReturn(testUser);

        Info_Entity result = myRestController.MyDetails(principal);

        assertNotNull(result);
        assertEquals(testUser.getId(), result.getId());
        assertNull(result.getAuthentication());
        verify(infoRepository).findByAuthenticationUsername("testuser");
    }

    // Test for MyDetails endpoint - user not found
    @Test
    void testMyDetails_UserNotFound() {
        when(principal.getName()).thenReturn("unknown");
        when(infoRepository.findByAuthenticationUsername("unknown")).thenReturn(null);

        Exception exception = assertThrows(UserNotFoundException.class, () -> {
            myRestController.MyDetails(principal);
        });
        
        assertEquals("User Not Found", exception.getMessage());
    }
}